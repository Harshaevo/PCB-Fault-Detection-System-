#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#  Sept 04, 2023 10:20:38 PM IST  platform: Windows NT

import sys
import tkinter as tk
import cv2

from tkinter import *
from tkinter import messagebox

from PIL import Image, ImageTk
import pcb_fault_gui1
import camera_and_file
import imagefp
import pcb_detect
#import Realtime_Database
import yolov8



def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)

    global _top1, _w1,_img01,_img02,_ricpname,_ribfname,_ticpname,_tibfname
    _top1 = root
    _w1 = pcb_fault_gui1.Toplevel1(_top1)
    _img01 = imagefp.imagepath()
    _img02 = imagefp.imagepath()
    _ricpname=imagefp.imagepath()
    _ribfname=imagefp.imagepath()
    _ticpname=imagefp.imagepath()
    _tibfname=imagefp.imagepath()
    root.mainloop()


def RICapture(*args):
    print('pcb_fault_gui1_support.RICapture')
    _ricpname.setimage(camera_and_file.camera())
    _ribfname.setimage(None)
    sys.stdout.flush()

def RISearch(*args):
    print('pcb_fault_gui1_support.RISearch')
    _ribfname.setimage(camera_and_file.browseFiles())
    _ricpname.setimage(None)
    sys.stdout.flush()

def RISet_image(*args):
    print('pcb_fault_gui1_support.RISet_image')
    print(_ribfname.getimage(),_ricpname.getimage())
    if _ricpname.getimage() != None:
        _img01.setimage(_ricpname.getimage())
        image = Image.open(_img01.getimage())
        resized_im = image.resize((600, 400),Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w1.Label3.configure(image=imgtk)
        _w1.Label3.image = imgtk
        sys.stdout.flush()
    elif _ribfname.getimage() != None:
        _img01.setimage(_ribfname.getimage())
        image = Image.open(_img01.getimage())
        resized_im = image.resize((600, 400),Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w1.Label3.configure(image=imgtk)
        _w1.Label3.image = imgtk
        sys.stdout.flush()
    else:
        messagebox.showwarning("Show Warning", "Please Enter a Reference Image")

def TICapture(*args):
    print('pcb_fault_gui1_support.TICapture')
    _ticpname.setimage(camera_and_file.camera())
    _tibfname.setimage(None)
    sys.stdout.flush()

def TISearch(*args):
    print('pcb_fault_gui1_support.TISearch')
    _tibfname.setimage(camera_and_file.browseFiles())
    _ticpname.setimage(None)
    sys.stdout.flush()

def TISet_image(*args):
    print('pcb_fault_gui1_support.TISet_image')
    print(_ticpname.getimage(),_tibfname.getimage())
    if _tibfname.getimage() != None:
        _img02.setimage(_tibfname.getimage())
        image = Image.open(_img02.getimage())
        print(image.size)
        resized_im = image.resize((600, 400),Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w1.Label4.configure(image=imgtk)
        _w1.Label4.image = imgtk
        sys.stdout.flush()
    elif _ticpname.getimage() != None:
        _img02.setimage(_ticpname.getimage())
        image = Image.open(_img02.getimage())
        resized_im = image.resize((600, 400),Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w1.Label4.configure(image=imgtk)
        _w1.Label4.image = imgtk
        sys.stdout.flush()
    else:
        messagebox.showwarning("Show Warning", "Please Enter a Test Image")

def Save_At_Image(*args):
    print('pcb_fault_gui1_support.Save_At_Image')
    image = Image.open(_img03.getimage())
    resized_im = image.resize((600, 400),Image.ANTIALIAS)
    camera_and_file.savefile(image)

def Save_Cfat_Image(*args):
    print('pcb_fault_gui1_support.Save_Cfat_Image')
    image = Image.open(_img04.getimage())
    resized_im = image.resize((600, 400),Image.ANTIALIAS)
    camera_and_file.savefile(image)

def Con1_Next(*args):

    print('pcb_fault_gui1_support.Con1_Next')

    if _img01.getimage() != None and _img02.getimage() != None:

        _top1.destroy()

        global _top2, _w2, root2,_img03,_img04,_img05,clslables

        _img03 = imagefp.imagepath()
        _img04 = imagefp.imagepath()
        _img05 = imagefp.imagepath()
        root = tk.Tk()
        root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
        _top2 = root
        _w2 = pcb_fault_gui1.Toplevel2(_top2)



        fdname,bgrname=pcb_detect.main(_img01.getimage(),_img02.getimage())



        _img03.setimage(fdname)
        _img04.setimage(bgrname)


        if _tibfname.getimage() != None and _ribfname.getimage() != None:
            image = Image.open(_img01.getimage())
            resized_im = image.resize((600, 400),Image.ANTIALIAS)
            imgtk = ImageTk.PhotoImage(image=resized_im)
            _w2.Label3_1.configure(image=imgtk)
            _w2.Label3_1.image = imgtk

            image = Image.open(_img03.getimage())
            resized_im = image.resize((600, 400),Image.ANTIALIAS)
            imgtk = ImageTk.PhotoImage(image=resized_im)
            _w2.Label4_1.configure(image=imgtk)
            _w2.Label4_1.image = imgtk
        elif _tibfname.getimage() != None and _ricpname.getimage() != None:
            image = Image.open(_img01.getimage())
            resized_im = image.resize((600, 400),Image.ANTIALIAS)
            imgtk = ImageTk.PhotoImage(image=resized_im)
            _w2.Label3_1.configure(image=imgtk)
            _w2.Label3_1.image = imgtk

            image = Image.open(_img03.getimage())
            resized_im = image.resize((600, 400),Image.ANTIALIAS)
            imgtk = ImageTk.PhotoImage(image=resized_im)
            _w2.Label4_1.configure(image=imgtk)
            _w2.Label4_1.image = imgtk
        elif _ribfname.getimage() != None and _ticpname.getimage() != None:
            image = Image.open(_img01.getimage())
            resized_im = image.resize((600, 400),Image.ANTIALIAS)
            imgtk = ImageTk.PhotoImage(image=resized_im)
            _w2.Label3_1.configure(image=imgtk)
            _w2.Label3_1.image = imgtk

            image = Image.open(_img03.getimage())
            resized_im = image.resize((600, 400),Image.ANTIALIAS)
            imgtk = ImageTk.PhotoImage(image=resized_im)
            _w2.Label4_1.configure(image=imgtk)
            _w2.Label4_1.image = imgtk
        else:
            image = Image.open(_img01.getimage())
            resized_im = image.resize((600, 400),Image.ANTIALIAS)
            imgtk = ImageTk.PhotoImage(image=resized_im)
            _w2.Label3_1.configure(image=imgtk)
            _w2.Label3_1.image = imgtk

            image = Image.open(_img03.getimage())
            resized_im = image.resize((600, 400),Image.ANTIALIAS)
            imgtk = ImageTk.PhotoImage(image=resized_im)
            _w2.Label4_1.configure(image=imgtk)
            _w2.Label4_1.image = imgtk

        root.mainloop()

        sys.stdout.flush()
    else:
        messagebox.showwarning("Show Warning", "Please Enter Images")


def Con2_Next(*args):
    print('pcb_fault_gui1_support.Con2_Next')

    _top2.destroy()

    global _top3, _w3, root3
    root = tk.Tk()
    root.protocol('WM_DELETE_WINDOW', root.destroy)
    _top3 = root
    _w3 = pcb_fault_gui1.Toplevel3(_top3)

    if _tibfname.getimage() != None and _ribfname.getimage() != None:
        image = Image.open(_img03.getimage())
        resized_im = image.resize((600, 400),Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w3.Label3_2.configure(image=imgtk)
        _w3.Label3_2.image = imgtk

        image = Image.open(_img04.getimage())
        resized_im = image.resize((600, 400),Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w3.Label4_2.configure(image=imgtk)
        _w3.Label4_2.image = imgtk
    elif _tibfname.getimage() != None and _ricpname.getimage() != None:
        image = Image.open(_img03.getimage())
        resized_im = image.resize((600, 400),Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w3.Label3_2.configure(image=imgtk)
        _w3.Label3_2.image = imgtk

        image = Image.open(_img04.getimage())
        resized_im = image.resize((600, 400),Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w3.Label4_2.configure(image=imgtk)
        _w3.Label4_2.image = imgtk

    elif _ribfname.getimage() != None and _ticpname.getimage() != None:
        image = Image.open(_img03.getimage())
        resized_im = image.resize((600, 400),Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w3.Label3_2.configure(image=imgtk)
        _w3.Label3_2.image = imgtk

        image = Image.open(_img04.getimage())
        resized_im = image.resize((600, 400),Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w3.Label4_2.configure(image=imgtk)
        _w3.Label4_2.image = imgtk

    else:

        image = Image.open(_img03.getimage())
        resized_im = image.resize((600, 400),Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im )
        _w3.Label3_2.configure(image=imgtk)
        _w3.Label3_2.image = imgtk

        image = Image.open(_img04.getimage())
        resized_im = image.resize((600, 400),Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w3.Label4_2.configure(image=imgtk)
        _w3.Label4_2.image = imgtk

    root.mainloop()
    sys.stdout.flush()


def Con3_Next(*args):
    print('pcb_fault_gui1_support.Con3_Next')

    _top3.destroy()

    global _top4, _w4, root4,clslables

    root = tk.Tk()
    root.protocol('WM_DELETE_WINDOW', root.destroy)
    _top4 = root
    _w4 = pcb_fault_gui1.Toplevel4(_top4)
    clslables, clsimagepath = yolov8.main(_img02.getimage())
    _img05.setimage(clsimagepath)

    if _ticpname.getimage() != None:

        image = Image.open(_img03.getimage())
        resized_im = image.resize((600, 400), Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w4.Label3_3.configure(image=imgtk)
        _w4.Label3_3.image = imgtk

        image = Image.open(_img05.getimage())
        resized_im = image.resize((600, 400), Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w4.Label4_3.configure(image=imgtk)
        _w4.Label4_3.image = imgtk

        root.mainloop()
        sys.stdout.flush()

    else:

        image = Image.open(_img03.getimage())
        resized_im = image.resize((600, 400),Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w4.Label3_3.configure(image=imgtk)
        _w4.Label3_3.image = imgtk

        image = Image.open(_img05.getimage())
        resized_im = image.resize((600, 400), Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=resized_im)
        _w4.Label4_3.configure(image=imgtk)
        _w4.Label4_3.image = imgtk

        root.mainloop()
        sys.stdout.flush()






def Con4_Next(*args):
    print('pcb_fault_gui1_support.Con4_Next')
    ###################
    #Realtime_Database.storage.put()
    _top4.destroy()
    sys.stdout.flush()

 
def Save_firebase(*args):
    print('pcb_fault_gui1_support.Save_firebase')
    id = _w4.Entry1.get()
    data={"id":id, "Defect_Detected_Image":_img03.getimage(), "Colour_Filtered_Image":_img04.getimage(),"Classified_Image":_img05.getimage(),"Labels":clslables}
    #######################################
    #Realtime_Database.setfirebasedata(id,data)
    messagebox.showinfo("Firebase", "Updating the Firebase Database")
    sys.stdout.flush()


if __name__ == '__main__':
    pcb_fault_gui1.start_up()